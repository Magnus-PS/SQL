Author: Magnus Skonberg
Date: March 6th 2023

Introduction
TBD (post proj)

...

Task 1:
Level: Moderate
Setup employees and departments tables based on provided specs.

--setup the employees table

CREATE TABLE employees (
	emp_id SERIAL PRIMARY KEY,
	first_name TEXT NOT NULL,
	last_name TEXT NOT NULL,
	job_position TEXT NOT NULL,
	salary DECIMAL(8,2),
	start_date DATE NOT NULL,
	birth_date DATE NOT NULL,
	store_id INT REFERENCES store(store_id),
	department_id INT,
	manager_id INT
);

-- setup departments table

CREATE TABLE departments (
	department_id SERIAL PRIMARY KEY,
	department TEXT NOT NULL,
	division TEXT NOT NULL
);

...

Task 2:
Level: Moderate
Alter the employees table in the following way:
- Set the column department_id to not null.
- Add a default value of CURRENT_DATE to the column start_date.
- Add the column end_date with an appropriate data type (one that you think makes sense).
- Add a constraint called birth_check that doesn't allow birth dates that are in the future.
- Rename the column job_position to position_title.

ALTER TABLE employees
ALTER COLUMN department_id SET NOT NULL,
ALTER COLUMN start_date SET DEFAULT CURRENT_DATE,
ADD COLUMN end_date DATE NOT NULL,
ADD CONSTRAINT birth_check CHECK (birth_date < CURRENT_DATE);

ALTER TABLE employees
RENAME COLUMN job_position TO position_title;

...

Task 3:
Level: Moderate
Insert values into employees table and fix the error. Then, insert values into departments table

--update values and remove NULL constraint from end_date column

ALTER TABLE employees
ALTER COLUMN end_date DROP NOT NULL;

INSERT INTO employees(emp_id,first_name,last_name,position_title,salary,start_date,birth_date,store_id,department_id,manager_id,end_date)
VALUES 
(1,'Morrie','Conaboy','CTO',21268.94,'2005-04-30','1983-07-10',1,1,NULL,NULL),
(2,'Miller','McQuarter','Head of BI',14614.00,'2019-07-23','1978-11-09',1,1,1,NULL),
(3,'Christalle','McKenny','Head of Sales',12587.00,'1999-02-05','1973-01-09',2,3,1,NULL),
(4,'Sumner','Seares','SQL Analyst',9515.00,'2006-05-31','1976-08-03',2,1,6,NULL),
(5,'Romain','Hacard','BI Consultant',7107.00,'2012-09-24','1984-07-14',1,1,6,NULL),
(6,'Ely','Luscombe','Team Lead Analytics',12564.00,'2002-06-12','1974-08-01',1,1,2,NULL),
(7,'Clywd','Filyashin','Senior SQL Analyst',10510.00,'2010-04-05','1989-07-23',2,1,2,NULL),
(8,'Christopher','Blague','SQL Analyst',9428.00,'2007-09-30','1990-12-07',2,2,6,NULL),
(9,'Roddie','Izen','Software Engineer',4937.00,'2019-03-22','2008-08-30',1,4,6,NULL),
(10,'Ammamaria','Izhak','Customer Support',2355.00,'2005-03-17','1974-07-27',2,5,3,'2013-04-14'),
(11,'Carlyn','Stripp','Customer Support',3060.00,'2013-09-06','1981-09-05',1,5,3,NULL),
(12,'Reuben','McRorie','Software Engineer',7119.00,'1995-12-31','1958-08-15',1,5,6,NULL),
(13,'Gates','Raison','Marketing Specialist',3910.00,'2013-07-18','1986-06-24',1,3,3,NULL),
(14,'Jordanna','Raitt','Marketing Specialist',5844.00,'2011-10-23','1993-03-16',2,3,3,NULL),
(15,'Guendolen','Motton','BI Consultant',8330.00,'2011-01-10','1980-10-22',2,3,6,NULL),
(16,'Doria','Turbat','Senior SQL Analyst',9278.00,'2010-08-15','1983-01-11',1,1,6,NULL),
(17,'Cort','Bewlie','Project Manager',5463.00,'2013-05-26','1986-10-05',1,5,3,NULL),
(18,'Margarita','Eaden','SQL Analyst',5977.00,'2014-09-24','1978-10-08',2,1,6,'2020-03-16'),
(19,'Hetty','Kingaby','SQL Analyst',7541.00,'2009-08-17','1999-04-25',1,2,6,NULL),
(20,'Lief','Robardley','SQL Analyst',8981.00,'2002-10-23','1971-01-25',2,3,6,'2016-07-01'),
(21,'Zaneta','Carlozzi','Working Student',1525.00,'2006-08-29','1995-04-16',1,3,6,'2012-02-19'),
(22,'Giana','Matz','Working Student',1036.00,'2016-03-18','1987-09-25',1,3,6,NULL),
(23,'Hamil','Evershed','Web Developper',3088.00,'2022-02-03','2012-03-30',1,4,2,NULL),
(24,'Lowe','Diamant','Web Developper',6418.00,'2018-12-31','2002-09-07',1,4,2,NULL),
(25,'Jack','Franklin','SQL Analyst',6771.00,'2013-05-18','2005-10-04',1,2,2,NULL),
(26,'Jessica','Brown','SQL Analyst',8566.00,'2003-10-23','1965-01-29',1,1,2,NULL);

--insert values into departments table
INSERT INTO departments
VALUES (1, 'Analytics','IT'),
(2, 'Finance','Administration'),
(3, 'Sales','Sales'),
(4, 'Website','IT'),
(5, 'Back Office','Administration');

...

Task 4:
Level: Moderate
Update values based on specs.
- Jack Franklin gets promoted to 'Senior SQL Analyst' and the salary raises to 7200.
- The responsible people decided to rename the position_title Customer Support to Customer Specialist.
- All SQL Analysts including Senior SQL Analysts get a raise of 6%.
Question: What is the average salary of a SQL Analyst in the company (excluding Senior SQL Analyst)?

UPDATE employees
SET position_title = 'Senior SQL Analyst', salary = 7200.00
WHERE first_name = 'Jack' AND last_name = 'Franklin';

UPDATE employees
SET position_title = 'Customer Specialist'
WHERE position_title = 'Customer Support';

UPDATE employees
SET salary = salary * 1.06
WHERE position_title LIKE '%SQL%';

--Avg SQL Analyst Salary = 8834.75
SELECT ROUND(AVG(salary),2)
FROM employees
WHERE position_title = 'SQL Analyst';

...

Task 5:
Level: Advanced
Write a query that adds a column called manager that contains first_name and last_name (in one column) in the data output.
Secondly, add a column called is_active with 'false' if the employee has left the company already, otherwise the value is 'true'.
Create a view called v_employees_info from that previous query.

CREATE VIEW v_employees_info
AS
SELECT	
	e1.*,
	CASE 
		WHEN e1.end_date IS NULL
			THEN 'True'
		ELSE 'False'
	END AS is_active,
	e2.first_name || ' ' || e2.last_name AS manager
FROM employees e1
LEFT JOIN employees e2
	ON e1.manager_id = e2.emp_id

...

Task 6:
Level: Moderate
Write a query that returns the average salaries for each positions with appropriate roundings.
What is the average salary for a Software Engineer in the company? 

SELECT
	position_title,
	ROUND(AVG(salary),2) AS avg_salary
FROM employees
GROUP BY 1
ORDER BY 2 DESC

...

Task 7:
Difficulty: Moderate
Write a query that returns the average salaries per division.
What is the average salary in the Sales department?

SELECT
	department,
	ROUND(AVG(salary),2) AS avg_salary
FROM employees e
LEFT JOIN departments d
	ON e.department_id = d.department_id
GROUP BY 1
ORDER BY 2 DESC

...

Task 8
Level: Advanced to Pro
Return spec'd columns and avg_position_salary.
Then, return how many people in the company earn less than the avg_position_salary.

--Part I
SELECT
	emp_id,
	first_name,
	last_name,
	position_title,
	salary,
	ROUND(AVG(salary) OVER(PARTITION BY position_title),2) AS avg_position_salary
FROM employees
ORDER BY 1

--Part II
SELECT
	COUNT(*)
FROM (
	SELECT
		emp_id,
		first_name,
		last_name,
		position_title,
		salary,
		ROUND(AVG(salary) OVER(PARTITION BY position_title),2) AS avg_position_salary
	FROM employees
) sub
WHERE sub.salary < sub.avg_position_salary

...

Task 9:
Difficulty: Advanced
Write a query that returns a running total of the salary development 
ordered by the start_date.
In your calculation, disregard that fact that people have left the company 
(write the query as if they were still working for the company).
What was the total salary after 2018-12-31? 180202.70

SELECT
	emp_id,
	salary,
	start_date,
	salary,
	SUM(salary) OVER(ORDER BY start_date) AS cum_salary
FROM employees
ORDER BY 3

...

Task 10:
Difficulty: Pro / Very Difficult

Create the same running total but now also considder the fact that 
people were leaving the company.
--interpretation: when a person leaves, we subtract their salary
--utilize start_date and end_date columns for cumulative salary calc
--start_date has +ve impact, end_date has -ve impact

WITH employees_coming_and_going AS (
	SELECT
		emp_id,
		salary,
		start_date AS date
	FROM v_employees_info

	UNION

	SELECT
		emp_id,
		(salary * -1.0) AS salary,
		end_date AS date
	FROM v_employees_info
	WHERE end_date IS NOT NULL
	ORDER BY 3
)

SELECT *,
	SUM(salary) OVER(ORDER BY date) AS cum_salary
FROM employees_coming_and_going

...

Task 11
Difficulty: Advanced to Pro
Write a query that outputs only the top earner per position_title including first_name, position_title, their salary, and the average salary per position_title. Remove instances of only one worker per position_title.
What is the top earner with the position_title SQL Analyst? 10085.90

SELECT
	first_name,
	position_title,
	salary,
	avg_position_salary
FROM (
	SELECT
		first_name,
		position_title,
		salary,
		RANK() OVER(PARTITION BY position_title ORDER BY salary DESC) as salary_rank,
		COUNT(*) OVER(PARTITION BY position_title) as worker_count,
		ROUND(AVG(salary) OVER(PARTITION BY position_title),2) as avg_position_salary
	FROM employees
) sub
WHERE salary_rank = 1 AND
	worker_count <> 1
ORDER BY 3 DESC

...

Task 12
Difficulty: Pro
Write a query that returns all meaningful aggregations of
- sum of salary, number of employees, and average salary
grouped by all meaningful combinations of
- division, department, and position_title.
Consider the levels of hierarchies in a meaningful way.

SELECT
	division,
	department,
	position_title,
	COUNT(*) AS employee_count,
	SUM(salary) AS cum_salary,
	ROUND(AVG(salary),2) AS avg_salary
FROM employees e
LEFT JOIN departments d
	ON e.department_id = d.department_id
GROUP BY
	GROUPING SETS(
		(division),
		(division, department),
		(division, department, position_title)
)
ORDER BY 1,2,3,4

...

Task 13
Difficulty: Advanced to Pro
Write a query that returns all employees (emp_id) including 
their position_title, department their salary and the rank of that 
salary partitioned by department.
The highest salary per division should have rank 1.

SELECT
	emp_id,
	position_title,
	department,
	division,
	salary,
	RANK() OVER(PARTITION BY division ORDER BY salary DESC) AS div_salary_rank
FROM employees e
LEFT JOIN departments d
	ON e.department_id = d.department_id

...

Task 14: 
Difficulty: Pro
Write a query that returns only the top earner of each department including
their emp_id, position_title, department and their salary.


SELECT
	emp_id,
	position_title,
	department,
	salary
FROM (
	SELECT
		emp_id,
		position_title,
		department,
		division,
		salary,
		RANK() OVER(PARTITION BY division ORDER BY salary DESC) AS div_salary_rank
	FROM employees e
	LEFT JOIN departments d
		ON e.department_id = d.department_id
) sub
WHERE div_salary_rank = 1

