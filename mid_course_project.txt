Author: Magnus Skonberg
Date: March 1st 2023

Introduction
Recently I wanted to test and re-up my SQL capabilities. I spent some time searching available SQL courses and decided to take Nikolai Shuster's "15 Days of SQL: The Complete SQL Masterclass 2023" available on Udemy.
I enrolled because the subject matter was pertinent, the format was effective, and the instructor and course had incredible reviews.
What follows is a "Mid term" of sorts. The course is loaded with practical examples and half way through the course Nikolai presented a project / exam for students to assess their SQL capabilities. I got 14/14 (Senior Data Analyst).

* The questions and "greencycles" data were graciously provided by Nikolai as a part of the Udemy course.
* The solutions that follow are my own.

...

Question 1:
Level: Simple
Topic: DISTINCT
Task: Create a list of all the different (distinct) replacement costs of the films.
Question: Whats the lowest replacement cost?
Answer: 9.99

SELECT DISTINCT replacement_cost
FROM film
ORDER BY 1
LIMIT 1;

...

Question 2:
Level: Moderate
Topic: CASE + GROUP BY
Task: Write a query that gives an overview of how many films have replacements costs in the following cost ranges
low: 9.99 - 19.99
medium: 20.00 - 24.99
high: 25.00 - 29.99
Question: How many films have a replacement cost in the "low" group?
Answer: 514

SELECT
	CASE 
		WHEN (replacement_cost >= 9.99 AND replacement_cost <= 19.99)
			THEN 'low'
		WHEN (replacement_cost >= 20.00 AND replacement_cost <= 24.99)
			THEN 'medium'
		WHEN (replacement_cost >= 25.00 AND replacement_cost <= 29.99)
			THEN 'high'
	END AS replacement_cost_range,
	COUNT(*)
FROM film
GROUP BY 1

...

Question 3:
Level: Moderate
Topic: JOIN
Task: Create a list of the film titles including their title, length and category name ordered descendingly by the length. Filter the results to only the movies in the category 'Drama' or 'Sports'.
Question: In which category is the longest film and how long is it?
Answer: Sports and 184

SELECT
	title,
	length,
	c.name as category
FROM film f
INNER JOIN film_category fc
	ON fc.film_id = f.film_id
INNER JOIN category c
	ON c.category_id = fc.category_id
WHERE c.name IN ('Sports', 'Drama')
ORDER BY 2 DESC

...

Question 4:
Level: Moderate
Topic: JOIN & GROUP BY
Task: Create an overview of how many movies (titles) there are in each category (name).
Question: Which category (name) is the most common among the films?
Answer: Sports with 74 titles

SELECT
	c.name as category,
	COUNT(*)
FROM film f
INNER JOIN film_category fc
	ON fc.film_id = f.film_id
INNER JOIN category c
	ON c.category_id = fc.category_id
GROUP BY 1
ORDER BY 2 DESC

...

Question 5:
Level: Moderate
Topic: JOIN & GROUP BY
Task: Create an overview of the actors first and last names and in  how many movies they appear.
Question: Which actor is part of most movies??
Answer: Susan Davis with 54 movies

SELECT
	first_name,
	last_name,
	COUNT(*)
FROM actor a
LEFT JOIN film_actor fa
	ON fa.actor_id = a.actor_id
GROUP BY 1,2
ORDER BY 3 DESC

...

Question 6:
Level: Moderate
Topic: LEFT JOIN & FILTERING
Task: Create an overview of the addresses that are not associated to any customer.
Question: How many addresses are that?
Answer: 4

SELECT
	COUNT(*)
FROM address a
LEFT JOIN customer c
	ON c.address_id = a.address_id
WHERE c.address_id IS NULL

...

Question 7:
Level: Moderate
Topic: JOIN & GROUP BY
Task: Create an overview of the cities and how much sales (sum of amount) have occured there.
Question: Which city has the most sales?
Answer: Cape Coral with a total amount of 221.55

SELECT
	city,
	SUM(amount)
FROM payment p
INNER JOIN customer c1
	ON c1.customer_id = p.customer_id
INNER JOIN address a
	ON a.address_id = c1.address_id
INNER JOIN city c2
	ON c2.city_id = a.city_id
GROUP BY 1
ORDER BY 2 DESC

...

Question 8:
Level: Moderate to difficult
Topic: JOIN & GROUP BY
Task: Create an overview of the revenue (sum of amount) grouped by a column in the format "country, city".
Question: Which country, city has the least sales?
Answer: United States, Tallahassee with a total amount of 50.85.

SELECT
	city,
	country,
	SUM(amount)
FROM payment p
INNER JOIN customer c1
	ON c1.customer_id = p.customer_id
INNER JOIN address a
	ON a.address_id = c1.address_id
INNER JOIN city c2
	ON c2.city_id = a.city_id
INNER JOIN country c3
	ON c3.country_id = c2.country_id
GROUP BY 1, 2
ORDER BY 3

...

Question 9:
Level: Difficult
Topic: Uncorrelated subquery
Task: Create a list with the average of the sales amount each staff_id has per customer.
Question: Which staff_id makes in average more revenue per customer?
Answer: staff_id 2 with an average revenue of 56.64 per customer.

SELECT
	staff_id,
	total_revenue / customer_count AS avg_rev_per_cust
FROM (
SELECT 
	staff_id,
	SUM(amount) AS total_revenue,
	COUNT(DISTINCT customer_id) AS customer_count
FROM payment
GROUP BY 1
) AS sub
ORDER BY 2 DESC

...

Question 10:
Level: Difficult to very difficult
Topic: EXTRACT + Uncorrelated subquery
Task: Create a query that shows average daily revenue of all Sundays.
Question: What is the daily average revenue of all Sundays?
Answer: 1410.65

SELECT
	ROUND(AVG(total_revenue),2)
FROM (
	SELECT
		payment_date::DATE AS date,
		SUM(amount) AS total_revenue
	FROM payment
	WHERE EXTRACT('DOW' FROM payment_date) = 0
	GROUP BY 1
) AS sub

...

Question 11:
Level: Difficult to very difficult
Topic: Correlated subquery
Task: Create a list of movies - with their length and their replacement cost - that are longer than the average length in each replacement cost group.
Question: Which two movies are the shortest in that list and how long are they?
Answer: CELEBRITY HORN and SEATTLE EXPECATIONS with 110 minutes.

SELECT
	title,
	length
FROM film f1
WHERE length > (SELECT
	AVG(length) AS avg_length
	FROM film f2
	WHERE f1.replacement_cost = f2.replacement_cost
)
ORDER BY 2

...

Question 12:
Level: Very difficult
Topic: Uncorrelated subquery
Task: Create a list that shows how much the average customer spent in total (customer life-time value) grouped by the different districts.
Question: Which district has the highest average customer life-time value?
Answer: Saint-Denis with an average customer life-time value of 216.54.

SELECT
	district,
	ROUND((total_revenue / customers),2) as avg_lifetime_value
FROM (
	SELECT 
		district,
		SUM(amount) as total_revenue,
		COUNT(DISTINCT p.customer_id) as customers
	FROM payment p
	INNER JOIN customer c
		ON c.customer_id = p.customer_id
	INNER JOIN address a
		ON a.address_id = c.address_id
	GROUP BY 1
) AS sub
ORDER BY 2 DESC

...

Question 13:
Level: Very difficult
Topic: Uncorrelated subquery
Task: Create a list that shows all payments including the payment_id, amount and the film category (name) plus the total amount that was made in this category. Order the results ascendingly by the category (name) and as second order criterion by the payment_id ascendingly.
Question: What is the total revenue of the category 'Action' and what is the lowest payment_id in that category 'Action'?
Answer: Total revenue in the category 'Action' is 4375.85 and the lowest payment_id in that category is 16055.

WITH category_amount AS (
	SELECT
		c.name as category,
		SUM(p.amount) total_category_amount
	FROM payment p
	INNER JOIN rental r
		ON r.rental_id = p.rental_id
	INNER JOIN inventory i
		ON i.inventory_id = r.inventory_id
	INNER JOIN film_category fc
		ON fc.film_id = i.film_id
	INNER JOIN category c
		ON c.category_id = fc.category_id
	GROUP BY 1
)

SELECT
	p.payment_id,
	p.amount,
	c.name as category,
	ca.total_category_amount
	
FROM payment p
INNER JOIN rental r
	ON r.rental_id = p.rental_id
INNER JOIN inventory i
	ON i.inventory_id = r.inventory_id
INNER JOIN film_category fc
	ON fc.film_id = i.film_id
INNER JOIN category c
	ON c.category_id = fc.category_id
INNER JOIN category_amount ca
	ON ca.category = c.name
WHERE c.name = 'Action'
ORDER BY 1

...

Bonus question 14:
Level: Extremly difficult
Topic: Correlated and uncorrelated subqueries (nested)
Task: Create a list with the top overall revenue of a film title (sum of amount per title) for each category (name).
Question: Which is the top performing film in the animation category?
Answer: DOGMA FAMILY with 178.70.

SELECT
	title,
	name AS category,
	SUM(amount) AS total_revenue
FROM payment p
INNER JOIN rental r
	ON r.rental_id = p.rental_id
INNER JOIN inventory i
	ON i.inventory_id = r.inventory_id
INNER JOIN film f
	ON f.film_id = i.film_id
INNER JOIN film_category fc
	ON fc.film_id = i.film_id
INNER JOIN category c
	ON c.category_id = fc.category_id
WHERE name = 'Animation'
GROUP BY 1,2
ORDER BY 3 DESC
